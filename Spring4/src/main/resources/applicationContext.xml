<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       https://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--
    xmlns 即 xml namespace xml 使用的命名空间
    xmlns:xsi 即 xml schema instance xml 遵守的具体规范
    xsi:schemaLocation 本文档 xml 遵守的规范 官方指定
    -->
    <!--
    通过反射方式在 IOC 容器中创建 bean 对象，需要 bean 有无参构造器
    -->
    <bean id="helloService" class="com.itis.spring4.helloworld.HelloWorld">
        <!--    属性注入-->
        <property name="name" value="Spring"></property>
    </bean>


    <!-- 配置自动扫描的包 -->
    <context:component-scan base-package="com.itis.spring4.aop"></context:component-scan>
<!--    使 AspectJ 注解起作用：自动为匹配的类生成代理对象 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

<!--    导入资源文件 -->
    <context:property-placeholder location="jdbc.properties"/>
<!--    配置 c3p0 数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>

        <property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
    </bean>
<!--    配置 spring 的 JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

<!--    配置 spring 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
<!--    启用事物注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--    配置 hibernate 的 sessionFactory 实例：通过 spring 提供的 LocalSessionFactoryBean 进行配置
        创建这些配置后可以在数据库中自动创建数据表
-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
<!--        配置数据源-->
        <property name="dataSource" ref="dataSource"></property>
<!--        配置 hibernate 配置文件的位置及名称-->
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <!--        配置 hibernate 映射文件的位置及名称 -->
        <property name="mappingLocations" value="classpath:com/itis/spring4/hibernate/pojo/*.hbm.xml"></property>
    </bean>

<!--    配置 spring 的声明式事物-->
<!--    1. 配置事务管理器-->
    <bean id="htManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
<!--    2. 配置事务属性，需要事物管理器-->
    <tx:advice id="txAdvice" transaction-manager="htManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
<!--    3. 配置事务切点并把切点和事物属性关联起来-->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.itis.spring4.hibernate.com.itis.springcloud.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
</beans>